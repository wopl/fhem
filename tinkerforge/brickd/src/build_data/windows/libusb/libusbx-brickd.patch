diff --git a/libusb/core.c b/libusb/core.c
index 729bce3..03e08d3 100644
--- a/libusb/core.c
+++ b/libusb/core.c
@@ -1796,6 +1796,12 @@ int usbi_gettimeofday(struct timeval *tp, void *tzp)
 }
 #endif
 
+static FILE *usbi_log_file = NULL;
+
+void API_EXPORTED libusb_set_log_file(FILE *file) {
+	usbi_log_file = file;
+}
+
 void usbi_log_v(struct libusb_context *ctx, enum libusb_log_level level,
 	const char *function, const char *format, va_list args)
 {
@@ -1804,6 +1810,10 @@ void usbi_log_v(struct libusb_context *ctx, enum libusb_log_level level,
 	int global_debug;
 	static int has_debug_header_been_displayed = 0;
 
+	if (usbi_log_file == NULL) {
+		usbi_log_file = stderr;
+	}
+
 #ifdef ENABLE_DEBUG_LOGGING
 	global_debug = 1;
 	UNUSED(ctx);
@@ -1825,8 +1835,8 @@ void usbi_log_v(struct libusb_context *ctx, enum libusb_log_level level,
 	usbi_gettimeofday(&now, NULL);
 	if ((global_debug) && (!has_debug_header_been_displayed)) {
 		has_debug_header_been_displayed = 1;
-		fprintf(stderr, "[timestamp] [threadID] facility level [function call] <message>\n");
-		fprintf(stderr, "--------------------------------------------------------------------------------\n");
+		fprintf(usbi_log_file, "[timestamp] [threadID] facility level [function call] <message>\n");
+		fprintf(usbi_log_file, "--------------------------------------------------------------------------------\n");
 	}
 	if (now.tv_usec < timestamp_origin.tv_usec) {
 		now.tv_sec--;
@@ -1856,15 +1866,15 @@ void usbi_log_v(struct libusb_context *ctx, enum libusb_log_level level,
 	}
 
 	if (global_debug) {
-		fprintf(stderr, "[%2d.%06d] [%08x] libusbx: %s [%s] ",
+		fprintf(usbi_log_file, "[%2d.%06d] [%08x] libusbx: %s [%s] ",
 			(int)now.tv_sec, (int)now.tv_usec, usbi_get_tid(), prefix, function);
 	} else {
-		fprintf(stderr, "libusbx: %s [%s] ", prefix, function);
+		fprintf(usbi_log_file, "libusbx: %s [%s] ", prefix, function);
 	}
 
-	vfprintf(stderr, format, args);
+	vfprintf(usbi_log_file, format, args);
 
-	fprintf(stderr, "\n");
+	fprintf(usbi_log_file, "\n");
 }
 
 void usbi_log(struct libusb_context *ctx, enum libusb_log_level level,
@@ -1946,3 +1956,7 @@ const struct libusb_version * LIBUSB_CALL libusb_get_version(void)
 {
 	return &libusb_version_internal;
 }
+
+void API_EXPORTED libusb_free(void *ptr) {
+	free(ptr);
+}
diff --git a/libusb/io.c b/libusb/io.c
index 1338981..1cdd67c 100644
--- a/libusb/io.c
+++ b/libusb/io.c
@@ -2377,7 +2377,6 @@ DEFAULT_VISIBILITY
 const struct libusb_pollfd ** LIBUSB_CALL libusb_get_pollfds(
 	libusb_context *ctx)
 {
-#ifndef OS_WINDOWS
 	struct libusb_pollfd **ret = NULL;
 	struct usbi_pollfd *ipollfd;
 	size_t i = 0;
@@ -2399,11 +2398,6 @@ const struct libusb_pollfd ** LIBUSB_CALL libusb_get_pollfds(
 out:
 	usbi_mutex_unlock(&ctx->pollfds_lock);
 	return (const struct libusb_pollfd **) ret;
-#else
-	usbi_err(ctx, "external polling of libusbx's internal descriptors "\
-		"is not yet supported on Windows platforms");
-	return NULL;
-#endif
 }
 
 /* Backends call this from handle_events to report disconnection of a device.
diff --git a/libusb/libusb-1.0.def b/libusb/libusb-1.0.def
index 3aba343..012b6e0 100644
--- a/libusb/libusb-1.0.def
+++ b/libusb/libusb-1.0.def
@@ -124,3 +124,17 @@ EXPORTS
   libusb_unref_device@4 = libusb_unref_device
   libusb_wait_for_event
   libusb_wait_for_event@8 = libusb_wait_for_event
+  usbi_pipe
+  usbi_pipe@4 = usbi_pipe
+  usbi_poll
+  usbi_poll@12 = usbi_poll
+  usbi_write
+  usbi_write@12 = usbi_write
+  usbi_read
+  usbi_read@12 = usbi_read
+  usbi_close
+  usbi_close@4 = usbi_close
+  libusb_set_log_file
+  libusb_set_log_file@4 = libusb_set_log_file
+  libusb_free
+  libusb_free@4 = libusb_free
diff --git a/libusb/libusb-1.0.rc b/libusb/libusb-1.0.rc
index 86cb853..92eb49d 100644
--- a/libusb/libusb-1.0.rc
+++ b/libusb/libusb-1.0.rc
@@ -47,7 +47,7 @@ BEGIN
 			VALUE "LegalTrademarks", "http://www.gnu.org/licenses/lgpl-2.1.html\0"
 			VALUE "OriginalFilename", "libusb-1.0.dll\0"
 			VALUE "PrivateBuild", "\0"
-			VALUE "ProductName", "libusb-1.0\0"
+			VALUE "ProductName", "libusb-1.0-ce75e9af3f9242ec328b0dc2336b69ff24287a3c-tf-7\0"
 			VALUE "ProductVersion", LIBUSB_VERSIONSTRING
 			VALUE "SpecialBuild", "\0"
 		END
diff --git a/libusb/libusb.h b/libusb/libusb.h
index da94c9b..2802cfc 100644
--- a/libusb/libusb.h
+++ b/libusb/libusb.h
@@ -52,6 +52,7 @@ typedef unsigned __int32  uint32_t;
 #include <sys/types.h>
 #include <time.h>
 #include <limits.h>
+#include <stdio.h>
 
 #if defined(__linux) || defined(__APPLE__) || defined(__CYGWIN__)
 #include <sys/time.h>
@@ -63,6 +64,7 @@ typedef unsigned __int32  uint32_t;
  * As this can be problematic if you include windows.h after libusb.h
  * in your sources, we force windows.h to be included first. */
 #if defined(_WIN32) || defined(__CYGWIN__)
+#include <winsock2.h> // for struct timeval
 #include <windows.h>
 #if defined(interface)
 #undef interface
@@ -1499,6 +1501,12 @@ void LIBUSB_CALL libusb_set_pollfd_notifiers(libusb_context *ctx,
 	libusb_pollfd_added_cb added_cb, libusb_pollfd_removed_cb removed_cb,
 	void *user_data);
 
+void LIBUSB_CALL libusb_set_log_file(FILE *file);
+
+#define LIBUSBX_EXPORTS_FREE_FUNCTION 1
+
+void LIBUSB_CALL libusb_free(void *ptr);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/libusb/os/poll_windows.c b/libusb/os/poll_windows.c
index 4601a79..dc847ec 100644
--- a/libusb/os/poll_windows.c
+++ b/libusb/os/poll_windows.c
@@ -246,7 +246,7 @@ void exit_polling(void)
  * event. To that extent, we create a single wfd and overlapped as a means
  * to access that event.
  */
-int usbi_pipe(int filedes[2])
+int API_EXPORTED usbi_pipe(int filedes[2])
 {
 	int i;
 	OVERLAPPED* overlapped;
@@ -517,7 +517,7 @@ struct winfd overlapped_to_winfd(OVERLAPPED* overlapped)
  * Currently, this function only accepts one of POLLIN or POLLOUT per fd
  * (but you can create multiple fds from the same handle for read and write)
  */
-int usbi_poll(struct pollfd *fds, unsigned int nfds, int timeout)
+int API_EXPORTED usbi_poll(struct pollfd *fds, unsigned int nfds, int timeout)
 {
 	unsigned i;
 	int _index, object_index, triggered;
@@ -639,7 +639,7 @@ poll_exit:
 /*
  * close a fake pipe fd
  */
-int usbi_close(int fd)
+int API_EXPORTED usbi_close(int fd)
 {
 	int _index;
 	int r = -1;
@@ -669,7 +669,7 @@ int usbi_close(int fd)
 /*
  * synchronous write for fake "pipe" signaling
  */
-ssize_t usbi_write(int fd, const void *buf, size_t count)
+ssize_t API_EXPORTED usbi_write(int fd, const void *buf, size_t count)
 {
 	int _index;
 	UNUSED(buf);
@@ -705,7 +705,7 @@ ssize_t usbi_write(int fd, const void *buf, size_t count)
 /*
  * synchronous read for fake "pipe" signaling
  */
-ssize_t usbi_read(int fd, void *buf, size_t count)
+ssize_t API_EXPORTED usbi_read(int fd, void *buf, size_t count)
 {
 	int _index;
 	ssize_t r = -1;
diff --git a/libusb/os/poll_windows.h b/libusb/os/poll_windows.h
index e53af2d..f1ade91 100644
--- a/libusb/os/poll_windows.h
+++ b/libusb/os/poll_windows.h
@@ -43,7 +43,7 @@ enum windows_version {
 };
 extern enum windows_version windows_version;
 
-#define MAX_FDS     256
+#define MAX_FDS     1024
 
 #define POLLIN      0x0001    /* There is data to read */
 #define POLLPRI     0x0002    /* There is urgent data to read */
@@ -74,11 +74,11 @@ struct winfd {
 };
 extern const struct winfd INVALID_WINFD;
 
-int usbi_pipe(int pipefd[2]);
-int usbi_poll(struct pollfd *fds, unsigned int nfds, int timeout);
-ssize_t usbi_write(int fd, const void *buf, size_t count);
-ssize_t usbi_read(int fd, void *buf, size_t count);
-int usbi_close(int fd);
+int LIBUSB_CALL usbi_pipe(int pipefd[2]);
+int LIBUSB_CALL usbi_poll(struct pollfd *fds, unsigned int nfds, int timeout);
+ssize_t LIBUSB_CALL usbi_write(int fd, const void *buf, size_t count);
+ssize_t LIBUSB_CALL usbi_read(int fd, void *buf, size_t count);
+int LIBUSB_CALL usbi_close(int fd);
 
 void init_polling(void);
 void exit_polling(void);
diff --git a/libusb/os/windows_usb.c b/libusb/os/windows_usb.c
index 914461d..8e12ece 100644
--- a/libusb/os/windows_usb.c
+++ b/libusb/os/windows_usb.c
@@ -2055,8 +2055,12 @@ static void windows_transfer_callback(struct usbi_transfer *itransfer, uint32_t
 			status = LIBUSB_TRANSFER_CANCELLED;
 		}
 		break;
+	case ERROR_FILE_NOT_FOUND:
+		usbi_dbg("detected disconnect");
+		status = LIBUSB_TRANSFER_NO_DEVICE;
+		break;
 	default:
-		usbi_err(ITRANSFER_CTX(itransfer), "detected I/O error: %s", windows_error_str(0));
+		usbi_err(ITRANSFER_CTX(itransfer), "detected I/O error: %s", windows_error_str(io_result));
 		status = LIBUSB_TRANSFER_ERROR;
 		break;
 	}
@@ -2130,7 +2134,7 @@ static int windows_handle_events(struct libusb_context *ctx, struct pollfd *fds,
 			windows_handle_callback(transfer, io_result, io_size);
 		} else {
 			usbi_err(ctx, "could not find a matching transfer for fd %x", fds[i]);
-			return LIBUSB_ERROR_NOT_FOUND;
+			//return LIBUSB_ERROR_NOT_FOUND;
 		}
 	}
 
