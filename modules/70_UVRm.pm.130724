# $Id: 70_UVRm.pm xxxx 2013-06-26 09:08:00Z wplettscher $
##############################################################################
###                                                                        ###
### UVRm heating control               Copyright W.Plettscher, 06.2013 ###
###                                                                        ###
### Access "Technische Alternative UVR1611" through "Bootloader-NET        ###
### and read measures 1..16.                                               ###
###                                                                        ###
##############################################################################
#
#     This file is part of fhem.
# 
#     Fhem is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 2 of the License, or
#     (at your option) any later version.
# 
#     Fhem is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with fhem.  If not, see <http://www.gnu.org/licenses/>.
#


package main;

use strict;
use warnings;
use Time::HiRes qw(gettimeofday);
use HttpUtils;

##############################################################################
###                                                                        ###
### UVRm_Initialize                                                        ###
###                                                                        ###
##############################################################################
sub UVRm_Initialize($) {

  my ($hash) = @_;

  $hash->{DefFn}   = "UVRm_Define";
  $hash->{UndefFn} = "UVRm_Undef";
  $hash->{GetFn}   = "UVRm_Get";
  $hash->{SetFn}   = "UVRm_Set";
  $hash->{AttrList}= "loglevel:0,1,2,3,4,5 localicons ".
                      $readingFnAttributes;

}

####################################
#sub latin1_to_utf8($) {
#
#  # http://perldoc.perl.org/perluniintro.html, UNICODE IN OLDER PERLS
#  my ($s)= @_;
#  $s =~ s/([\x80-\xFF])/chr(0xC0|ord($1)>>6).chr(0x80|ord($1)&0x3F)/eg;
#  return $s;
#}

####################################

#sub temperature_in_c($$) {
#  my ($temperature, $unitsystem)= @_;
#  return $unitsystem ne "SI" ? int(($temperature-32)*5/9+0.5) : $temperature;
#}

#sub wind_in_km_per_h($$) {
#  my ($wind, $unitsystem)= @_;
#  return $unitsystem ne "SI" ? int(1.609344*$wind+0.5) : $wind;
#}

#sub degrees_to_direction($@) {
#   my ($degrees,@directions_txt_i18n) = @_;
#   my $mod = int((($degrees + 11.25) % 360) / 22.5);
#   return $directions_txt_i18n[$mod];
#}

##############################################################################
###                                                                        ###
### UVRm_UpdateReading                                                     ###
###                                                                        ###
##############################################################################
sub UVRm_UpdateReading($$$$) {

  my ($hash,$prefix,$key,$value)= @_;

  Log 1, "DEBUG updateReading UVRm: $prefix $key $value";

#  my $unitsystem= $hash->{READINGS}{unit_system}{VAL};
#  
#  if($key eq "low") {
#        $key= "low_c";
#        $value= temperature_in_c($value,$unitsystem);
#  } elsif($key eq "high") {
#        $key= "high_c";
#        $value= temperature_in_c($value,$unitsystem);
#  } elsif($key eq "humidity") {
#        # standardize reading - allow generic logging of humidity.
#        $value=~ s/.*?(\d+).*/$1/; # extract numeric
#  }

#  my $reading= $prefix . $key;
#
#  readingsBulkUpdate($hash,$reading,$value);
#  if($reading eq "temp_c") {
#    readingsBulkUpdate($hash,"temperature",$value); # additional entry for compatibility
#  }
#  if($reading eq "wind_condition") {
#    $value=~ s/.*?(\d+).*/$1/; # extract numeric
#    readingsBulkUpdate($hash,"wind",wind_in_km_per_h($value,$unitsystem)); # additional entry for compatibility
#  }

  return 1;
}

##############################################################################
###                                                                        ###
### UVRm_RetrieveData                                                      ###
###                                                                        ###
##############################################################################
sub UVRm_RetrieveData($)
{
  my ($hash)= @_;
  
  my $ip= $hash->{IP};

#  my $fc = undef;
#  my $xml = GetFileFromURL("http://weather.yahooapis.com/forecastrss?w=" . $location . "&u=" . $units, 3, undef, 1);
#  return 0 if( ! defined $xml || $xml eq "");

#  my $response = GetFileFromURL("http://172.22.1.4/580400.htm", 3, undef, 1);
  my $response = GetFileFromURL("http://" . $ip . "/580400.htm", 3, undef, 1);
  my $logline = "";

#  foreach my $l (split([\<\>],$response)) {
  foreach my $l1 (split("<",$response)) {
    foreach my $l2 (split(">",$l1)) {
      ### only lines with nbsp are of interest
      if ($l2 =~ /nbsp/) {

        ### eliminate nbsp and degC from line
        $l2 =~ s/&nbsp\;/ /g;
        $l2 =~ s/&deg\;C //g;
        
#        Log 1, "DEBUG UVRm: line=\"$l2\"";

#        foreach my $l3 (split(" ",$l2)) {
#          next if ($l3 eq "");
#          Log 1, "DEBUG UVRm: sub= $l3";
#        }
        
        ### eliminate two lines that do not contain values
        next if ($l2 =~ /MESSWERT/);
        next if ($l2 =~ /NETZWERK/);

        ### convert decimal comma to decimal point
        $l2 =~ s/,/./g;

        ### we now got a single line only containing the header and two values
        my ($v1, $v2, $v3) = split " ",$l2;

        ### transform EIN/AUS of $v2 and $v3 into 1/0 values
        if ($v2 eq "EIN") {$v2 = "1";}
        if ($v2 eq "AUS") {$v2 = "0";}
        if ($v3 eq "EIN") {$v3 = "1";}
        if ($v3 eq "AUS") {$v3 = "0";}

        ### transform "-----" of $v2 and $v3 into "-"
        if ($v2 eq "-----") {$v2 = "-";}
        if ($v3 eq "-----") {$v3 = "-";}

#        Log 1, "Debug UVRm: $v1 $v2 $v3";
       
        ### each of the 8 lines contains 2 values
        if ($v1 eq "1:") {
          $logline = $v2;
#          $logline = $logline . " " . $v2;
          $logline = $logline . " " . $v3;
#          readingsBulkUpdate($hash, "v01", $v2) if (defined($v2));
#          readingsBulkUpdate($hash, "v02", $v3) if (defined($v3));
        }
        if ($v1 eq "3:") {
          $logline = $logline . " " . $v2;
          $logline = $logline . " " . $v3;
        }
        if ($v1 eq "5:") {
          $logline = $logline . " " . $v2;
          $logline = $logline . " " . $v3;
        }
        if ($v1 eq "7:") {
          $logline = $logline . " " . $v2;
          $logline = $logline . " " . $v3;
        }
        if ($v1 eq "9:") {
          $logline = $logline . " " . $v2;
          $logline = $logline . " " . $v3;
        }
        if ($v1 eq "11:") {
          $logline = $logline . " " . $v2;
          $logline = $logline . " " . $v3;
        }
        if ($v1 eq "13:") {
          $logline = $logline . " " . $v2;
          $logline = $logline . " " . $v3;
        }
        if ($v1 eq "15:") {
          $logline = $logline . " " . $v2;
          $logline = $logline . " " . $v3;
        }

      }
    }
  }

  ### write accumulated logline into logfile
  readingsBulkUpdate($hash, "UVR1611", $logline);

#  foreach my $l (split("<",$xml)) {
#          #Log 1, "DEBUG WEATHER: line=\"$l\"";
#          next if($l eq "");                   # skip empty lines
#          $l =~ s/(\/|\?)?>$//;                # strip off /> and >
#          my ($tag,$value)= split(" ", $l, 2); # split tag data=..... at the first blank
#          next if(!defined($tag) || ($tag !~ /^yweather:/));
#          $fc= 0 if($tag eq "yweather:condition");
#          $fc++ if($tag eq "yweather:forecast");
#          my $prefix= $fc ? "fc" . $fc ."_" : "";
  
#          ### location
#          if ($tag eq "yweather:location" ) {
#            $value =~/city="(.*?)" .*country="(.*?)".*/;
#            my $loc = "";
#            $loc = $1 if (defined($1)); 
#            $loc .= ", $2" if (defined($2)); 
#            readingsBulkUpdate($hash, "city", $loc);
#          }
        
#          ### current condition and forecast
#          if (($tag eq "yweather:condition" ) || ($tag eq "yweather:forecast" )) {
#             my $code = (($value =~/code="([0-9]*?)".*/) ? $1 : undef);
#             if(defined($code)) {
#               readingsBulkUpdate($hash, $prefix . "code", $code);
#               my $text = $YahooCodes_i18n[$code];
#               if ($text) { readingsBulkUpdate($hash, $prefix . "condition", $text); }
#               #### add icon logic here - generate from code
#               $text = $iconlist[$code];
#               readingsBulkUpdate($hash, $prefix . "icon", $text) if ($text);
#             }  
#          }

#          ### current condition 
#          if ($tag eq "yweather:condition" ) {
#             my $temp = (($value =~/temp="(-?[0-9.]*?)".*/) ? $1 : undef);
#             if(defined($temp)) {
#                readingsBulkUpdate($hash, "temperature", $temp);
#                readingsBulkUpdate($hash, "temp_c", $temp); # compatibility
#                $temp = int(( $temp * 9  / 5 ) + 32.5);  # Celsius to Fahrenheit
#                readingsBulkUpdate($hash, "temp_f", $temp); # compatibility
#             }  

#             my $datum = (($value =~/date=".*? ([0-9].*)".*/) ? $1 : undef);  
#             readingsBulkUpdate($hash, "current_date_time", $datum) if (defined($1));

#             my $day = (($value =~/date="(.*?), .*/) ? $1 : undef);  
#             if(defined($day)) {
#                readingsBulkUpdate($hash, "day_of_week", $wdays_txt_i18n{$day});
#             }          
#          }

#          ### forecast 
#          if ($tag eq "yweather:forecast" ) {
#             my $low_c = (($value =~/low="(-?[0-9.]*?)".*/) ? $1 : undef);
#             if(defined($low_c)) { readingsBulkUpdate($hash, $prefix . "low_c", $low_c); }
#             my $high_c = (($value =~/high="(-?[0-9.]*?)".*/) ? $1 : undef);
#             if(defined($high_c)) { readingsBulkUpdate($hash, $prefix . "high_c", $high_c); }
#             my $day1 = (($value =~/day="(.*?)" .*/) ? $1 : undef); # forecast
#             if(defined($day1)) {
#                readingsBulkUpdate($hash, $prefix . "day_of_week", $wdays_txt_i18n{$day1});
#             }   
#          }
#
#          ### humidiy / Pressure
#          if ($tag eq "yweather:atmosphere" ) {
#            $value =~/humidity="([0-9.]*?)" .*visibility="([0-9.]*?|\s*?)" .*pressure="([0-9.]*?)"  .*rising="([0-9.]*?)" .*/;
#
#            if ($1) { readingsBulkUpdate($hash, "humidity", $1); }
#            my $vis = (($2 eq "") ? " " : int($2+0.5));   # clear visibility field
#            readingsBulkUpdate($hash, "visibility", $vis);
#            if ($3) { readingsBulkUpdate($hash, "pressure", int($3+0.5)); }
#            if ($4) {
#              readingsBulkUpdate($hash, "pressure_trend", $4);
#              readingsBulkUpdate($hash, "pressure_trend_txt", $pressure_trend_txt_i18n{$4});
#              readingsBulkUpdate($hash, "pressure_trend_sym", $pressure_trend_sym{$4});
#            }
#          }
#
#          ### wind
#          if ($tag eq "yweather:wind" ) {
#            $value =~/chill="(-?[0-9.]*?)" .*direction="([0-9.]*?)" .*speed="([0-9.]*?)" .*/;
#            readingsBulkUpdate($hash, "wind_chill", $1) if (defined($1));
#            readingsBulkUpdate($hash, "wind_direction", $2) if (defined($2));
#            my $windspeed= defined($3) ? int($3+0.5) : "";
#            readingsBulkUpdate($hash, "wind_speed", $windspeed);
#            readingsBulkUpdate($hash, "wind", $windspeed); # duplicate for compatibility
#            if (defined($2) & defined($3)) {
#              my $wdir = degrees_to_direction($2,@directions_txt_i18n);
#              readingsBulkUpdate($hash, "wind_condition", "Wind: $wdir $windspeed km/h"); # compatibility
#            }
#          }   
#  }
}  #end sub



##############################################################################
###                                                                        ###
### UVRm_GetUpdate                                                         ###
###                                                                        ###
##############################################################################
sub UVRm_GetUpdate($)
{
  my ($hash) = @_;

  if(!$hash->{LOCAL}) {
    InternalTimer(gettimeofday()+$hash->{INTERVAL}, "UVRm_GetUpdate", $hash, 1);
  }

  readingsBeginUpdate($hash);

  UVRm_RetrieveData($hash);

#  my $temperature= $hash->{READINGS}{temperature}{VAL};
#  my $humidity= $hash->{READINGS}{humidity}{VAL};
#  my $wind= $hash->{READINGS}{wind}{VAL};
#  my $val= "T: $temperature  H: $humidity  W: $wind";

#  my $v1= $hash->{READINGS}{v1}{VAL};
#  my $v2= $hash->{READINGS}{v2}{VAL};
#  my $v3= $hash->{READINGS}{v3}{VAL};
#  my $val= "1: $v1  2: $v2  3: $v3";

#  Log GetLogLevel($hash->{NAME},4), "UVRm ". $hash->{NAME} . ": $val";
  readingsEndUpdate($hash, defined($hash->{LOCAL} ? 0 : 1)); # DoTrigger, because sub is called by a timer instead of dispatch

  return 1;
}


##############################################################################
###                                                                        ###
### UVRm_Get                                                               ###
###                                                                        ###
##############################################################################
sub UVRm_Get($@) {

  my ($hash, @a) = @_;

  return "argument is missing" if(int(@a) != 2);

  $hash->{LOCAL} = 1;
  UVRm_GetUpdate($hash);
  delete $hash->{LOCAL};

  my $reading= $a[1];
  my $value;

  if(defined($hash->{READINGS}{$reading})) {
        $value= $hash->{READINGS}{$reading}{VAL};
  } else {
        return "no such reading: $reading";
  }

  return "$a[0] $reading => $value";
}

##############################################################################
###                                                                        ###
### UVRm_Set                                                               ###
###                                                                        ###
##############################################################################
sub UVRm_Set($@) {
  my ($hash, @a) = @_;

  my $cmd= $a[1];

  # usage check
  if((@a == 2) && ($a[1] eq "update")) {
    RemoveInternalTimer($hash);
    UVRm_GetUpdate($hash);
    return undef;
  } else {
    return "Unknown argument $cmd, choose one of update";
  }
}


##############################################################################
###                                                                        ###
### UVRm_Define                                                            ###
###                                                                        ###
##############################################################################
sub UVRm_Define($$) {

  my ($hash, $def) = @_;

  # define <name> UVRm <ip> [interval]
  # define myuvr UVRm 192.168.178.25 900

  my @a = split("[ \t][ \t]*", $def);

  return "syntax: define <name> UVRm <ip> [interval]"
    if(int(@a) < 3 && int(@a) > 5); 

  $hash->{STATE} = "Initialized";
#  $hash->{fhem}{interfaces}= "temperature;humidity;wind";
  $hash->{fhem}{interfaces}= "v1;v2;v3";

  my $name      = $a[0];
  my $ip        = $a[2];
  my $interval  = 900;
  if(int(@a)>=4) { $interval= $a[3]; }

  $hash->{IP}           = $ip;
  $hash->{INTERVAL}     = $interval;
  $hash->{READINGS}{current_date_time}{TIME}= TimeNow();
  $hash->{READINGS}{current_date_time}{VAL}= "none";

  $hash->{LOCAL} = 1;
  UVRm_GetUpdate($hash);
  delete $hash->{LOCAL};

  InternalTimer(gettimeofday()+$hash->{INTERVAL}, "UVRm_GetUpdate", $hash, 0);

  return undef;
}

##############################################################################
###                                                                        ###
### UVRm_Undef                                                              ###
###                                                                        ###
##############################################################################
sub UVRm_Undef($$) {

  my ($hash, $arg) = @_;

  RemoveInternalTimer($hash);
  return undef;
}

######################################
#
## Icon Parameter
#
#use constant ICONHIGHT => 120;
#use constant ICONWIDTH => 175;
#use constant ICONSCALE => 0.5;
#
######################################
#
#sub
#WeatherIconIMGTag($) {
#
#  my $width= int(ICONSCALE*ICONWIDTH);
#  my ($icon)= @_;
#  my $url= FW_IconURL("weather/$icon");
#  my $style= " width=$width";
#  return "<img src=\"$url\"$style alt=\"$icon\">";
#  
#}
#
######################################
#sub
#WeatherAsHtml($)
#{
#
#  my ($d) = @_;
#  $d = "<none>" if(!$d);
#  return "$d is not a Weather instance<br>"
#        if(!$defs{$d} || $defs{$d}{TYPE} ne "Weather");
#
#  my $width= int(ICONSCALE*ICONWIDTH);
#      
#  my $ret = sprintf("<table><tr><th width=%d></th><th></th></tr>", $width);
#  $ret .= sprintf('<tr><td width=%d>%s</td><td>%s<br>%s°C  %s%%<br>%s</td></tr>',
#        $width,
#        WeatherIconIMGTag(ReadingsVal($d, "icon", "")),
#        ReadingsVal($d, "condition", ""),
#        ReadingsVal($d, "temp_c", ""), ReadingsVal($d, "humidity", ""),
#        ReadingsVal($d, "wind_condition", ""));
#
#  for(my $i=1; $i<=5; $i++) {
#    #  Yahoo provides 5 days since June 2013 (previouly 2 days)
#    #next if (ReadingsVal($d, "fc${i}_code", "") eq ""); # MH skip non existent entries
#
#    $ret .= sprintf('<tr><td width=%d>%s</td><td>%s: %s<br>min %s°C max %s°C</td></tr>',
#        $width,
#        WeatherIconIMGTag(ReadingsVal($d, "fc${i}_icon", "")),
#        ReadingsVal($d, "fc${i}_day_of_week", ""),
#        ReadingsVal($d, "fc${i}_condition", ""),
#        ReadingsVal($d, "fc${i}_low_c", ""), ReadingsVal($d, "fc${i}_high_c", ""));
#  }
#
#  $ret .= "</table>";
#  return $ret;
#}
#
#####################################


1;

=pod
=begin html

<a name="UVRm"></a>
<h3>UVRm</h3>
<ul>
  <br>

  <a name="UVRmdefine"></a>
  <b>Define</b>
  <ul>
    <code>define &lt;name&gt; UVRm &lt;ip&gt; [&lt;interval&gt;]</code><br>
    <br>
    Defines a device for UVR1611 measurement readings.<br><br>

    A Weather device periodically gathers current and forecast weather conditions
    from the Yahoo Weather API.<br><br>

    The parameter <code>location</code> is the WOEID (WHERE-ON-EARTH-ID), go to
    <a href="http://weather.yahoo.com">http://weather.yahoo.com</a> to find it out for your location.<br><br>

    The optional parameter <code>interval</code> is the time between subsequent updates
    in seconds. It defaults to 3600 (1 hour).<br><br>

    The optional language parameter may be one of
    <code>de</code>,
    <code>en</code>,
    <code>nl</code>,

    It determines the natural language in which the forecast information appears.
    It defaults to <code>en</code>. If you want to set the language you also have to set the interval.<br><br>

    Examples:
    <pre>
      define MyWeather Weather 673513
      define Forecast Weather 673513 1800
     </pre>
  </ul>
  <br>

  <a name="Weatherset"></a>
  <b>Set </b>
  <ul>
    <code>set &lt;name&gt; update</code><br><br>

    Forces the retrieval of the weather data. The next automatic retrieval is scheduled to occur
    <code>interval</code> seconds later.<br><br>
  </ul>
  <br>

  <a name="Weatherget"></a>
  <b>Get</b>
  <ul>
    <code>get &lt;name&gt; &lt;reading&gt;</code><br><br>

    Valid readings and their meaning (? can be one of 1, 2 and stands
    for today, tomorrow):<br>
    <table>
    <tr><td>city</td><td>name of town returned for location</td></tr>
    <tr><td>code</td><td>current condition code</td></tr>
    <tr><td>condition</td><td>current condition</td></tr>
    <tr><td>current_date_time</td><td>last update of forecast on server</td></tr>
    <tr><td>fc?_code</td><td>forecast condition code</td></tr>
    <tr><td>fc?_condition</td><td>forecast condition</td></tr>
    <tr><td>fc?_day_of_week</td><td>day of week for day +?</td></tr>
    <tr><td>fc?_high_c</td><td>forecasted daily high in degrees centigrade</td></tr>
    <tr><td>fc?_icon</td><td>forecast icon</td></tr>
    <tr><td>fc?_low_c</td><td>forecasted daily low in degrees centigrade</td></tr>
    <tr><td>humidity</td><td>current humidity in %</td></tr>
    <tr><td>icon</td><td>relative path for current icon</td></tr>
    <tr><td>pressure</td><td>air pressure in hPa</td></tr>
    <tr><td>pressure_trend</td><td>air pressure trend (0= steady, 1= rising, 2= falling)</td></tr>
    <tr><td>pressure_trend_txt</td><td>textual representation of air pressure trend</td></tr>
    <tr><td>pressure_trend_sym</td><td>symbolic representation of air pressure trend</td></tr>
    <tr><td>temperature</td><td>current temperature in degrees centigrade</td></tr>
    <tr><td>temp_c</td><td>current temperature in degrees centigrade</td></tr>
    <tr><td>temp_f</td><td>current temperature in degrees Fahrenheit</td></tr>
    <tr><td>visibility</td><td>visibility in km</td></tr>
    <tr><td>wind</td><td>wind speed in km/h</td></tr>
    <tr><td>wind_chill</td><td>wind chill in degrees centigrade</td></tr>
    <tr><td>wind_condition</td><td>wind direction and speed</td></tr>
    <tr><td>wind_direction</td><td>direction wind comes from in degrees (0 = north wind)</td></tr>
    <tr><td>wind_speed</td><td>same as wind</td></tr>
    </table>

  </ul>
  <br>

  <a name="Weatherattr"></a>
  <b>Attributes</b>
  <ul>
    <li><a href="#readingFnAttributes">readingFnAttributes</a></li>
  </ul>
  <br>
</ul>

=end html
=cut
